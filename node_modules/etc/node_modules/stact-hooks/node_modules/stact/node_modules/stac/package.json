{
  "name": "stac",
  "version": "0.0.12",
  "description": "Maintain a sorted stack of things.",
  "main": "stac.js",
  "dependencies": {},
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cpsubrian/node-stac.git"
  },
  "homepage": "https://github.com/cpsubrian/node-stac",
  "keywords": [
    "sort",
    "array",
    "stack"
  ],
  "author": {
    "name": "Brian Link",
    "email": "cpsubrian@gmail.com"
  },
  "license": "MIT",
  "readme": "stac\n====\n\nMaintain a sorted stack of things.\n\n[![build status](https://secure.travis-ci.org/cpsubrian/node-stac.png)](http://travis-ci.org/cpsubrian/node-stac)\n\n![Puzzle](http://www.stageslearning.com/files/free-resources/blog_images/ring%20stack.jpg)\n\n\nExamples\n--------\n\n**Add arbitrary things to a stack**\n\n```js\nvar createStac = require('stac')\n  , stack = createStac();\n\nstack.add('A');\nstack.add(23);\nstack.add(['foo', 'bar']);\n\nstack.first({my: 'Object'});\nstack.last('The End');\n\nconsole.log(stack.items());\n// [ { my: 'Object' }, 'A', 23, [ 'foo', 'bar' ], 'The End']\n```\n\n\n**Add things to a stack with weights**\n\n```js\nvar createStac = require('stac')\n  , stack = createStac();\n\nstack.add(3, 'C');\nstack.add(1, 'A');\nstack.add(4, 'D');\nstack.add(2, 'B');\n\nstack.forEach(function (letter) {\n  console.log(letter);\n});\n// A\n// B\n// C\n// D\n```\n\n**Advanced usage: custom sortBy and comparator**\n\n```js\nvar createStac = require('stac')\nvar stack = createStac({\n  sortBy: function (item) {\n    return item.width * item.height;\n  },\n  comparator: function (a, b) {\n    if (a === b) return 0;\n    // Reverse sort\n    return a < b ? 1 : -1;\n  }\n});\n\nstack.add({color: 'red', width: 5, height: 4});\nstack.add({color: 'green', width: 1, height: 2});\nstack.add({color: 'blue', width: 8, height: 2});\n\nconsole.log(stack.map(function (item) {\n  return item.color;\n}));\n// [ 'red', 'blue', 'green' ]\n```\n\nAPI\n---\n\n### createStac([options])\n\nThe only export for this module. Returns instances of Stac objects.\n\n```js\nvar createStac = require('stac');\n\n// Create a stac object.\nvar stack = createStac();\n\n// Create a stac object with options.\nvar another = createStac({\n  sortBy: 'age'\n});\n```\n\n#### options\n\n- **sortBy** - String or function. If string, and items are objects, then the value\n           of the property at this key will be used for sorting. If function,\n           then the function will be called with the item to determine its\n           sort value. Default: `'weight'`.\n- **defaultVal** - If no sorting value is provided or can be determined for an item,\n               then this value will be used. Default: `0`.\n- **comparator** - A custom comparator function `(a, b)`. Will be called with the\n               values of two items to compare. Should return 0, 1, or -1; similar\n               to how `Array.prototype.sort()` is used. Default: `(sort by numeric value)`.\n\n### Methods\n\nMethods of `Stac` objects.\n\n**add ( [val], item )**\n\nAdd an item to the stack. Optionally pass a value to sort by.\n\n**remove ( item )**\n\nRemove an item from the stack.\n\n**first ( [val], item ) | unshift ( [val], item )**\n\nAdd an item to the front of the stack. Items inserted this way will *always* be sorted\nin front of items added with `add()` or `last()`. Within the *first* set, items\nwill be sorted normally.\n\n**last ( [val], item ) | push ( [val], item )**\n\nAdd an item to the end of the stack. Items inserted this way will *always* be\nsorted behind items added with `add()` or `first()`. Within the *last* set, items\nwill be sorted normally.\n\n**multi (method, items)**\n\nHelper to operate on multiple items with one call. Example: `stack.multi('add', ['A', 'B', 'C'])`.\n\n**clone()**\n\nReturns a copy of a stack.\n\n*Note: items in the stack will still reference the originals.*\n\n**items() | toJSON()**\n\nReturns the sorted array of items in the stack.\n\n**forEach ( iterator, [thisArg] )**\n\nIterate over items in the stack (just like `Array.prototype.forEach`).\n\n**map ( func, [thisArg] )**\n\nReturns a mapped representation of the stack (just like an `Array.prototype.map`).\n\n**pop()**\n\nReturns and removes the last item from the stack (similar to `Array.prototype.pop`).\n\n**shift()**\n\nReturns and removes the first item from the stack (similar to `Array.prototype.shift`).\n\n### Properties\n\nProperties of `Stac` objects.\n\n**length**\n\nReturns the current length of the stack.\n\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\nCopyright (C) 2012 Terra Eclipse, Inc. ([http://www.terraeclipse.com](http://www.terraeclipse.com))\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cpsubrian/node-stac/issues"
  },
  "_id": "stac@0.0.12",
  "dist": {
    "shasum": "62ffd93586edffd7a7f624e038c2f0ca8d1ba56c",
    "tarball": "http://registry.npmjs.org/stac/-/stac-0.0.12.tgz"
  },
  "_from": "stac@>=0.0.12 <0.1.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "cpsubrian",
    "email": "cpsubrian@gmail.com"
  },
  "maintainers": [
    {
      "name": "cpsubrian",
      "email": "cpsubrian@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "62ffd93586edffd7a7f624e038c2f0ca8d1ba56c",
  "_resolved": "https://registry.npmjs.org/stac/-/stac-0.0.12.tgz"
}
