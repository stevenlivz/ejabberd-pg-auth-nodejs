{
  "name": "stact",
  "version": "0.0.12",
  "description": "Manage a stack of functions and execute them with flow control.",
  "main": "stact.js",
  "dependencies": {
    "stac": "~0.0.12"
  },
  "devDependencies": {
    "mocha": "*",
    "bench": "~0.3.5",
    "async": "~0.2.9"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cpsubrian/node-stact.git"
  },
  "homepage": "https://github.com/cpsubrian/node-stact",
  "keywords": [
    "flow",
    "control"
  ],
  "author": {
    "name": "Brian Link",
    "email": "cpsubrian@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/cpsubrian/node-stact/issues"
  },
  "readme": "stact\n=====\n\nManage a sorted stack of functions and execute them with flow control.\n\n[![build status](https://secure.travis-ci.org/cpsubrian/node-stact.png)](http://travis-ci.org/cpsubrian/node-stact)\n\n![Yummy](http://www.ihop.com/menus/main-menu/pancakes/-/media/ihop/MenuItems/Pancakes/Strawberry%20Banana%20Pancakes/Strawberry_Banana_Pancakes.png?mh=367)\n\nExample\n-------\n\nImagine you want to validate a model before saving it. Your validation handlers\ncould be built up as a stack.\n\n```js\nvar validators = require('stact')();\n\nvar model = {\n  id: 'E48Hy',\n  email: '123@abc.com',\n  name: 'Brian',\n  color: '#2233ff'\n};\n\n// Email is required.\nvalidators.add(function (model, next) {\n  if (!model.email) {\n    return next(new Error('Email is required'));\n  }\n  next();\n});\n\n// Lookup name in a DB and verify it.\nvalidators.add(function (model, next) {\n  myDB.findName(model.id, function (err, name) {\n    if (err) return next(err);\n    if (model.name !== name) {\n      return next(new Error('Name does not match our records'));\n    }\n    next();\n  });\n});\n\n// Color should be a valid hex color.\nvalidators.add(function (model, next) {\n  if (!/^#[0-9a-fA-F]{6}$/.test(model.color)) {\n    return next(new Error('Not a valid color'));\n  }\n  next();\n});\n\n// Run the validators (in parallel).\nvalidators.run(model, function (err) {\n  if (err) // Handle the error.\n  myDB.save(model, function (err) {\n    // Model now saved.\n  });\n});\n```\n\nAPI\n---\n\n### Create a stact\n\nThis module exports a single factory function for creating stact stacks. It is\ncalled like:\n\n```js\nvar createStact = require('stact');\nvar stack = createStact(options);\n```\n\n#### options\n\n- All [stac options](https://github.com/cpsubrian/node-stac#options) are supported.\n- **func** - If set, every item in the stack will run with this function. [See Example](https://github.com/cpsubrian/node-stact#create-a-stack-that-revolves-around-one-function)\n- **funcProp** - If set, stact will assume that items are objects and that the\n             function to run will be found under this property.\n- **getFunc** - If set, stact will call this function for each item, passing the item\n            to it. It should return the function to run for the item.\n\n\n### Add functions to the stack\n\nAdd functions to the stack using the API of [stac](https://github.com/cpsubrian/node-stac).\n\nThe last argument of the function MUST always be a continuation callback.\n\n```js\nstack.add(function (next) {\n  // Do stuff.\n\n  // There was an error ...\n  next(new Error('Oops!'));\n\n  // ... or if no error ...\n  next();\n});\n```\n\nAll of **stac**'s API is supported ...\n\n... such as weighting your stack:\n\n```js\nstack.add(300, function () { /* ... */ });\nstack.add(100, function () { /* ... */ });\nstack.add(500, function () { /* ... */ });\n```\n\n... or prioritizing with first() and last():\n\n```js\nstack.add(function () { /* ... */});\nstack.add(function () { /* ... */});\n\nstack.first(function () { /* ... */});\nstack.first(function () { /* ... */});\n\nstack.last(function () { /* ... */});\n```\n\n### Create a stack that revolves around one function.\n\nIn some cases you want to call the same function multiple times with different\ninformation.\n\n```js\nvar createStact = require('stact');\nvar stack = createStact(function (prefix, next)\n  // `this` will be the current item being processed.\n  next(null, prefix + this);\n});\n\nstack.add('Brian');\nstack.add('Joe');\nstack.add('Mary');\n\nstack.runSeries('Name: ', function (err, results) {\n  console.log(results);\n  // [ 'Name: Brian', 'Name: Joe', 'Name: 'Mary' ]\n});\n```\n\n### stack.run ( [arguments ...], callback )\n\nRun the stack (in parallel), passing arbitray arguments to the functions.\nResults will be in sorted stack order.\n\nAny error will cause the provided callback to be immediately invoked with the\nerror, but other asychronous callbacks may continue to run in the background.\nYour callback will only be called once.\n\n```js\nstack.run(arg1, arg2, function (err, results) {\n  // Handle error or the results.\n});\n```\n\n### stack.runSeries ( [arguments ...], callback )\n\nRun the stack in series, passing arbitrary arguments to the functions.\nResults will be in sorted stack order.\n\nAny error will cause the run to immediately end, invoking the provided callback\nwith the error.\n\n```js\nstack.runSeries(arg1, arg2, arg3, function (err, results) {\n  // Handle error or the results.\n});\n```\n\n### stack.runWaterfall ( [arguments ...], callback )\n\nRun the stack in a 'waterfall'. In this mode each function in the stack will\nbe calling the next function in the stack, with the last stack item calling\nthe final callback provided in the `stack.runWaterfall()` call.\n\nThe arguments can change at any-time, but the most common use-case is probably passing\none argument that is being modified by the stack, and other arguments providing\nsupplementary data.\n\nAny error will cause the run to immediately end, invoking the provided callback\nwith the error.\n\n**Example with changing arguments**\n\n```js\nstack.add(function (next) {\n  next(null, 'one', 'two');\n});\n\nstack.add(function (arg1, arg2, next) {\n  // arg1 is 'one'\n  // arg2 is 'two'\n  next(null, 'three');\n});\n\nstack.add(function (arg1, next) {\n  // arg1 is 'three'\n  next(null, 'done');\n});\n\nstack.runWaterfall(function (err, result) {\n  // result now equals 'done'\n});\n```\n\n**Example passing along something to be modified**\n\n```js\nstack.add(function (result, spacer, next) {\n  next(null, result + 'Foo' + spacer, spacer);\n});\n\nstack.add(function (result, spacer, next) {\n  next(null, result + 'Bar' + spacer, spacer);\n});\n\nstack.add(function (result, spacer, next) {\n  next(null, result + 'Baz' + spacer, spacer);\n});\n\nstack.runWaterfall('Result: ', ' - ', function (err, result) {\n  // result is now 'Result: Foo - Bar - Baz - '\n});\n```\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\nCopyright (C) 2013 Terra Eclipse, Inc. ([http://www.terraeclipse.com](http://www.terraeclipse.com))\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "stact@0.0.12",
  "dist": {
    "shasum": "406a48e9adb5ff7580d96cc5350fb75ffd1d81fb",
    "tarball": "http://registry.npmjs.org/stact/-/stact-0.0.12.tgz"
  },
  "_from": "stact@>=0.0.1 <0.1.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "cpsubrian",
    "email": "cpsubrian@gmail.com"
  },
  "maintainers": [
    {
      "name": "cpsubrian",
      "email": "cpsubrian@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "406a48e9adb5ff7580d96cc5350fb75ffd1d81fb",
  "_resolved": "https://registry.npmjs.org/stact/-/stact-0.0.12.tgz"
}
